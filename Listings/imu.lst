C251 COMPILER V5.60.0,  imu                                                                20/07/25  04:10:03  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE imu
OBJECT MODULE PLACED IN .\Objects\imu.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Src\imu.c XSMALL BROWSE INCDIR(.\Libraries\libraries;.\Libraries\seekf
                    -ree_components;.\Libraries\seekfree_libraries;.\Libraries\seekfree_peripheral;.\Inc) DEBUG PRINT(.\Listings\imu.lst) TAB
                    -S(2) OBJECT(.\Objects\imu.obj) 

stmt  level    source

    1          #include "imu.h"
    2          #include "SEEKFREE_IMU963RA.h"
    3          
    4          extern char buf[256];
    5          
    6          // 全局变量定义
    7          IMU963RA_Data imu963ra_data = {0};
    8          IMU963RA_Data imu963ra_data_filtered = {0};
    9          IMU963RA_Angle imu963ra_angle = {0};
   10          IMU963RA_Quaternion imu963ra_quaternion = {1.0f, 0.0f, 0.0f, 0.0f};
   11          IMU963RA_Calibration imu963ra_calibration = {0};
   12          
   13          // 内部变量
   14          static float integral_error_x = 0.0f;
   15          static float integral_error_y = 0.0f;
   16          static float integral_error_z = 0.0f;
   17          static uint8 init_flag = 0;
   18          
   19          /**
   20           * @brief 初始化IMU963RA传感器
   21           * @return 0: 成功, 1: 失败
   22           */
   23          uint8 imu963ra_init_custom(void)
   24          {
   25   1          uint8 result = 0;
   26   1          
   27   1          // 调用底层初始化函数
   28   1          result = imu963ra_init();
   29   1          
   30   1          if (result == 0) {
   31   2              // 初始化四元数
   32   2              imu963ra_quaternion.q0 = 1.0f;
   33   2              imu963ra_quaternion.q1 = 0.0f;
   34   2              imu963ra_quaternion.q2 = 0.0f;
   35   2              imu963ra_quaternion.q3 = 0.0f;
   36   2              
   37   2              // 重置积分误差
   38   2              integral_error_x = 0.0f;
   39   2              integral_error_y = 0.0f;
   40   2              integral_error_z = 0.0f;
   41   2              
   42   2              // 重置校准标志
   43   2              imu963ra_calibration.calibrated = 0;
   44   2              
   45   2              init_flag = 1;
   46   2              
   47   2              delay_ms(100);
   48   2              // sprintf(buf, "IMU963RA initialization successful\r\n");
   49   2              // uart_putbuff(UART_2, buf, strlen(buf));
   50   2              printf("IMU963RA initialization successful\r\n");
   51   2            } else {
   52   2              // sprintf(buf, "IMU963RA initialization failed\r\n");
   53   2              // uart_putbuff(UART_2, buf, strlen(buf));
   54   2              printf("IMU963RA initialization failed\r\n");
   55   2          }
   56   1          
   57   1          return result;
C251 COMPILER V5.60.0,  imu                                                                20/07/25  04:10:03  PAGE 2   

   58   1      }
   59          
   60          /**
   61           * @brief 读取IMU原始数据
   62           */
   63          void imu963ra_read_data(void)
   64          {
   65   1          if (!init_flag) return;
   66   1          
   67   1          // 读取加速度数据
   68   1          imu963ra_get_acc();
   69   1          imu963ra_data.accX = imu963ra_acc_x;
   70   1          imu963ra_data.accY = imu963ra_acc_y;
   71   1          imu963ra_data.accZ = imu963ra_acc_z;
   72   1          
   73   1          // 读取陀螺仪数据
   74   1          imu963ra_get_gyro();
   75   1          imu963ra_data.gyroX = imu963ra_gyro_x;
   76   1          imu963ra_data.gyroY = imu963ra_gyro_y;
   77   1          imu963ra_data.gyroZ = imu963ra_gyro_z;
   78   1          
   79   1          // 读取磁力计数据
   80   1          imu963ra_get_mag();
   81   1          imu963ra_data.magX = imu963ra_mag_x;
   82   1          imu963ra_data.magY = imu963ra_mag_y;
   83   1          imu963ra_data.magZ = imu963ra_mag_z;
   84   1      }
   85          
   86          /**
   87           * @brief 校准IMU传感器（计算零偏）
   88           */
   89          void imu963ra_calibrate(void)
   90          {
   91   1          
   92   1          
   93   1          int32 sum_acc_x = 0, sum_acc_y = 0, sum_acc_z = 0;
   94   1          int32 sum_gyro_x = 0, sum_gyro_y = 0, sum_gyro_z = 0;
   95   1          uint16 i;
   96   1        
   97   1        if (!init_flag) return;
   98   1          // sprintf(buf, "Starting IMU calibration...\r\n");
   99   1          // uart_putbuff(UART_2, buf, strlen(buf));
  100   1          printf("Starting IMU calibration...\r\n");
  101   1          for (i = 0; i < IMU963RA_CALIBRATION_COUNT; i++) {
  102   2              imu963ra_read_data();
  103   2              
  104   2              sum_gyro_x += imu963ra_data.gyroX;
  105   2              sum_gyro_y += imu963ra_data.gyroY;
  106   2              sum_gyro_z += imu963ra_data.gyroZ;
  107   2              
  108   2              delay_ms(2);
  109   2              
  110   2              if (i % 50 == 0) {
  111   3                  // sprintf(buf, "Calibration progress: %d%%\r\n", (i * 100) / IMU963RA_CALIBRATION_COUNT);
  112   3                  // uart_putbuff(UART_2, buf, strlen(buf));
  113   3                  printf("Calibration progress: %d%%\r\n", (i * 100) / IMU963RA_CALIBRATION_COUNT);
  114   3              }
  115   2          }
  116   1          
  117   1          // 计算陀螺仪零偏（加速度计不校准零偏，因为重力影响）
  118   1          imu963ra_calibration.gyroX_offset = sum_gyro_x / IMU963RA_CALIBRATION_COUNT;
  119   1          imu963ra_calibration.gyroY_offset = sum_gyro_y / IMU963RA_CALIBRATION_COUNT;
  120   1          imu963ra_calibration.gyroZ_offset = sum_gyro_z / IMU963RA_CALIBRATION_COUNT;
  121   1          
  122   1          imu963ra_calibration.calibrated = 1;
  123   1      
C251 COMPILER V5.60.0,  imu                                                                20/07/25  04:10:03  PAGE 3   

  124   1          // sprintf(buf, "IMU calibration completed\r\n");
  125   1          // uart_putbuff(UART_2, buf, strlen(buf));
  126   1          printf("IMU calibration completed\r\n");
  127   1          // sprintf(buf, "Gyro offsets: X=%d, Y=%d, Z=%d\r\n", 
  128   1          //        imu963ra_calibration.gyroX_offset,
  129   1          //        imu963ra_calibration.gyroY_offset,
  130   1          //        imu963ra_calibration.gyroZ_offset);
  131   1          // uart_putbuff(UART_2, buf, strlen(buf));
  132   1          printf("Gyro offsets: X=%d, Y=%d, Z=%d\r\n", 
  133   1                 imu963ra_calibration.gyroX_offset,
  134   1                 imu963ra_calibration.gyroY_offset,
  135   1                 imu963ra_calibration.gyroZ_offset);
  136   1      }
  137          
  138          /**
  139           * @brief 应用校准参数
  140           */
  141          void imu963ra_apply_calibration(void)
  142          {
  143   1          if (!imu963ra_calibration.calibrated) return;
  144   1          
  145   1          // 只对陀螺仪数据应用零偏校正
  146   1          imu963ra_data.gyroX -= imu963ra_calibration.gyroX_offset;
  147   1          imu963ra_data.gyroY -= imu963ra_calibration.gyroY_offset;
  148   1          imu963ra_data.gyroZ -= imu963ra_calibration.gyroZ_offset;
  149   1      }
  150          
  151          /**
  152           * @brief 低通滤波器
  153           */
  154          void imu963ra_low_pass_filter(void)
  155          {
  156   1          const float filter_coefficient = 0.1f;
  157   1        const float gyro_filter = 0.3f;
  158   1          
  159   1          // 对加速度数据进行低通滤波
  160   1          imu963ra_data_filtered.accX = imu963ra_data_filtered.accX * (1.0f - filter_coefficient) + 
  161   1                                        imu963ra_data.accX * filter_coefficient;
  162   1          imu963ra_data_filtered.accY = imu963ra_data_filtered.accY * (1.0f - filter_coefficient) + 
  163   1                                        imu963ra_data.accY * filter_coefficient;
  164   1          imu963ra_data_filtered.accZ = imu963ra_data_filtered.accZ * (1.0f - filter_coefficient) + 
  165   1                                        imu963ra_data.accZ * filter_coefficient;
  166   1          
  167   1          // 对陀螺仪数据进行轻微滤波
  168   1          
  169   1          imu963ra_data_filtered.gyroX = imu963ra_data_filtered.gyroX * (1.0f - gyro_filter) + 
  170   1                                         imu963ra_data.gyroX * gyro_filter;
  171   1          imu963ra_data_filtered.gyroY = imu963ra_data_filtered.gyroY * (1.0f - gyro_filter) + 
  172   1                                         imu963ra_data.gyroY * gyro_filter;
  173   1          imu963ra_data_filtered.gyroZ = imu963ra_data_filtered.gyroZ * (1.0f - gyro_filter) + 
  174   1                                         imu963ra_data.gyroZ * gyro_filter;
  175   1          
  176   1          // 磁力计数据直接复制（可根据需要添加滤波）
  177   1          imu963ra_data_filtered.magX = imu963ra_data.magX;
  178   1          imu963ra_data_filtered.magY = imu963ra_data.magY;
  179   1          imu963ra_data_filtered.magZ = imu963ra_data.magZ;
  180   1      }
  181          
  182          /**
  183           * @brief 快速平方根函数（牛顿迭代法）
  184           */
  185          float imu963ra_sqrt(float x)
  186          {
  187   1          float result, xhalf;
  188   1          int i;
  189   1          
C251 COMPILER V5.60.0,  imu                                                                20/07/25  04:10:03  PAGE 4   

  190   1          if (x <= 0.0f) return 0.0f;
  191   1          
  192   1          // 使用标准库的sqrt函数，更可靠
  193   1          return sqrt(x);
  194   1          
  195   1          // 备用的快速算法（如果需要）
  196   1          /*
  197   1          result = x;
  198   1          xhalf = 0.5f * result;
  199   1          i = *(int*)&result;
  200   1          i = 0x5f3759df - (i >> 1);
  201   1          result = *(float*)&i;
  202   1          result = result * (1.5f - xhalf * result * result);
  203   1          result = result * (1.5f - xhalf * result * result); // 再迭代一次提高精度
  204   1          return result * x;
  205   1          */
  206   1      }
*** WARNING C47 IN LINE 187 OF Src\imu.c: 'result': unreferenced local variable
*** WARNING C47 IN LINE 187 OF Src\imu.c: 'xhalf': unreferenced local variable
*** WARNING C47 IN LINE 188 OF Src\imu.c: 'i': unreferenced local variable
  207          
  208          /**
  209           * @brief 四元数归一化
  210           */
  211          void imu963ra_normalize_quaternion(IMU963RA_Quaternion *q)
  212          {
  213   1          float norm, inv_norm;
  214   1          
  215   1          norm = sqrt(q->q0*q->q0 + q->q1*q->q1 + q->q2*q->q2 + q->q3*q->q3);
  216   1          
  217   1          if (norm > 0.001f) {  // 增加阈值防止除零
  218   2              inv_norm = 1.0f / norm;
  219   2              q->q0 *= inv_norm;
  220   2              q->q1 *= inv_norm;
  221   2              q->q2 *= inv_norm;
  222   2              q->q3 *= inv_norm;
  223   2          } else {
  224   2              // 如果四元数太小，重置为单位四元数
  225   2              q->q0 = 1.0f;
  226   2              q->q1 = 0.0f;
  227   2              q->q2 = 0.0f;
  228   2              q->q3 = 0.0f;
  229   2          }
  230   1      }
  231          
  232          /**
  233           * @brief 更新姿态角（使用互补滤波器和四元数）
  234           */
  235          void imu963ra_update_attitude(void)
  236          {
  237   1          // 声明所有局部变量
  238   1          float ax, ay, az;
  239   1          float gx, gy, gz;
  240   1          float acc_norm;
  241   1          float vx, vy, vz;
  242   1          float ex, ey, ez;
  243   1          float q0_dot, q1_dot, q2_dot, q3_dot;
  244   1          float sin_pitch_temp;
  245   1          const float RAD_TO_DEG = 180.0f / 3.14159265359f;
  246   1          const float DEG_TO_RAD = 3.14159265359f / 180.0f;
  247   1          
  248   1          if (!init_flag) return;
  249   1          
  250   1          // 转换为物理单位
  251   1          ax = imu963ra_acc_to_g(imu963ra_data_filtered.accX);
  252   1          ay = imu963ra_acc_to_g(imu963ra_data_filtered.accY);
C251 COMPILER V5.60.0,  imu                                                                20/07/25  04:10:03  PAGE 5   

  253   1          az = imu963ra_acc_to_g(imu963ra_data_filtered.accZ);
  254   1          
  255   1          gx = imu963ra_gyro_to_dps(imu963ra_data_filtered.gyroX) * DEG_TO_RAD; // 转换为弧度/秒
  256   1          gy = imu963ra_gyro_to_dps(imu963ra_data_filtered.gyroY) * DEG_TO_RAD;
  257   1          gz = imu963ra_gyro_to_dps(imu963ra_data_filtered.gyroZ) * DEG_TO_RAD;
  258   1          
  259   1          // 归一化加速度
  260   1          acc_norm = sqrt(ax*ax + ay*ay + az*az);
  261   1          
  262   1          if (acc_norm > 0.1f) {  // 只有在加速度有效时才进行修正
  263   2              ax /= acc_norm;
  264   2              ay /= acc_norm;
  265   2              az /= acc_norm;
  266   2              
  267   2              // 从四元数计算预期的重力方向
  268   2              vx = 2.0f * (imu963ra_quaternion.q1 * imu963ra_quaternion.q3 - imu963ra_quaternion.q0 * imu963ra_
             -quaternion.q2);
  269   2              vy = 2.0f * (imu963ra_quaternion.q0 * imu963ra_quaternion.q1 + imu963ra_quaternion.q2 * imu963ra_
             -quaternion.q3);
  270   2              vz = imu963ra_quaternion.q0 * imu963ra_quaternion.q0 - imu963ra_quaternion.q1 * imu963ra_quaterni
             -on.q1 - 
  271   2                   imu963ra_quaternion.q2 * imu963ra_quaternion.q2 + imu963ra_quaternion.q3 * imu963ra_quaterni
             -on.q3;
  272   2              
  273   2              // 计算误差（叉积）
  274   2              ex = ay * vz - az * vy;
  275   2              ey = az * vx - ax * vz;
  276   2              ez = ax * vy - ay * vx;
  277   2              
  278   2              // 积分误差
  279   2              integral_error_x += ex * IMU963RA_KI * IMU963RA_SAMPLE_TIME;
  280   2              integral_error_y += ey * IMU963RA_KI * IMU963RA_SAMPLE_TIME;
  281   2              integral_error_z += ez * IMU963RA_KI * IMU963RA_SAMPLE_TIME;
  282   2              
  283   2              // 调整陀螺仪测量值
  284   2              gx += IMU963RA_KP * ex + integral_error_x;
  285   2              gy += IMU963RA_KP * ey + integral_error_y;
  286   2              gz += IMU963RA_KP * ez + integral_error_z;
  287   2          }
  288   1          
  289   1          // 四元数微分方程
  290   1          q0_dot = 0.5f * (-imu963ra_quaternion.q1 * gx - imu963ra_quaternion.q2 * gy - imu963ra_quaternion.q3 
             -* gz);
  291   1          q1_dot = 0.5f * ( imu963ra_quaternion.q0 * gx + imu963ra_quaternion.q2 * gz - imu963ra_quaternion.q3 
             -* gy);
  292   1          q2_dot = 0.5f * ( imu963ra_quaternion.q0 * gy - imu963ra_quaternion.q1 * gz + imu963ra_quaternion.q3 
             -* gx);
  293   1          q3_dot = 0.5f * ( imu963ra_quaternion.q0 * gz + imu963ra_quaternion.q1 * gy - imu963ra_quaternion.q2 
             -* gx);
  294   1          
  295   1          // 积分四元数
  296   1          imu963ra_quaternion.q0 += q0_dot * IMU963RA_SAMPLE_TIME;
  297   1          imu963ra_quaternion.q1 += q1_dot * IMU963RA_SAMPLE_TIME;
  298   1          imu963ra_quaternion.q2 += q2_dot * IMU963RA_SAMPLE_TIME;
  299   1          imu963ra_quaternion.q3 += q3_dot * IMU963RA_SAMPLE_TIME;
  300   1          
  301   1          // 归一化四元数
  302   1          imu963ra_normalize_quaternion(&imu963ra_quaternion);
  303   1          
  304   1          // 从四元数计算欧拉角，使用更安全的方法
  305   1          // Roll (绕X轴旋转)
  306   1          imu963ra_angle.roll = atan2(2.0f * (imu963ra_quaternion.q0 * imu963ra_quaternion.q1 + imu963ra_quater
             -nion.q2 * imu963ra_quaternion.q3),
  307   1                                      1.0f - 2.0f * (imu963ra_quaternion.q1 * imu963ra_quaternion.q1 + imu963ra
             -_quaternion.q2 * imu963ra_quaternion.q2)) * RAD_TO_DEG;
  308   1          
C251 COMPILER V5.60.0,  imu                                                                20/07/25  04:10:03  PAGE 6   

  309   1          // Pitch (绕Y轴旋转) - 使用安全的asin
  310   1          sin_pitch_temp = 2.0f * (imu963ra_quaternion.q0 * imu963ra_quaternion.q2 - imu963ra_quaternion.q3 * i
             -mu963ra_quaternion.q1);
  311   1          if (sin_pitch_temp > 1.0f) sin_pitch_temp = 1.0f;
  312   1          if (sin_pitch_temp < -1.0f) sin_pitch_temp = -1.0f;
  313   1          imu963ra_angle.pitch = asin(sin_pitch_temp) * RAD_TO_DEG;
  314   1          
  315   1          // Yaw (绕Z轴旋转)
  316   1          imu963ra_angle.yaw = atan2(2.0f * (imu963ra_quaternion.q0 * imu963ra_quaternion.q3 + imu963ra_quatern
             -ion.q1 * imu963ra_quaternion.q2),
  317   1                                     1.0f - 2.0f * (imu963ra_quaternion.q2 * imu963ra_quaternion.q2 + imu963ra_
             -quaternion.q3 * imu963ra_quaternion.q3)) * RAD_TO_DEG;
  318   1      }
  319          
  320          /**
  321           * @brief 获取横滚角
  322           */
  323          float imu963ra_get_roll(void)
  324          {
  325   1          return imu963ra_angle.roll;
  326   1      }
  327          
  328          /**
  329           * @brief 获取俯仰角
  330           */
  331          float imu963ra_get_pitch(void)
  332          {
  333   1          return imu963ra_angle.pitch;
  334   1      }
  335          
  336          /**
  337           * @brief 获取偏航角
  338           */
  339          float imu963ra_get_yaw(void)
  340          {
  341   1          return imu963ra_angle.yaw;
  342   1      }
  343          
  344          /**
  345           * @brief 获取四元数
  346           */
  347          void imu963ra_get_quaternion(IMU963RA_Quaternion *q)
  348          {
  349   1          q->q0 = imu963ra_quaternion.q0;
  350   1          q->q1 = imu963ra_quaternion.q1;
  351   1          q->q2 = imu963ra_quaternion.q2;
  352   1          q->q3 = imu963ra_quaternion.q3;
  353   1      }
  354          
  355          /**
  356           * @brief 重置姿态解算
  357           */
  358          void imu963ra_reset_attitude(void)
  359          {
  360   1          imu963ra_quaternion.q0 = 1.0f;
  361   1          imu963ra_quaternion.q1 = 0.0f;
  362   1          imu963ra_quaternion.q2 = 0.0f;
  363   1          imu963ra_quaternion.q3 = 0.0f;
  364   1          
  365   1          imu963ra_angle.roll = 0.0f;
  366   1          imu963ra_angle.pitch = 0.0f;
  367   1          imu963ra_angle.yaw = 0.0f;
  368   1          
  369   1          integral_error_x = 0.0f;
  370   1          integral_error_y = 0.0f;
  371   1          integral_error_z = 0.0f;
C251 COMPILER V5.60.0,  imu                                                                20/07/25  04:10:03  PAGE 7   

  372   1      }
  373          
  374          /**
  375           * @brief 将加速度原始数据转换为g
  376           */
  377          float imu963ra_acc_to_g(int16 acc_value)
  378          {
  379   1          // 根据量程设置转换（假设±8g量程）
  380   1          return (float)acc_value / 4098.0f;
  381   1      }
  382          
  383          /**
  384           * @brief 将陀螺仪原始数据转换为°/s
  385           */
  386          float imu963ra_gyro_to_dps(int16 gyro_value)
  387          {
  388   1          // 根据量程设置转换（假设±2000dps量程）
  389   1          return (float)gyro_value / 14.3f;
  390   1      }
  391          
  392          /**
  393           * @brief 将磁力计原始数据转换为高斯
  394           */
  395          float imu963ra_mag_to_gauss(int16 mag_value)
  396          {
  397   1          // 根据量程设置转换（假设8G量程）
  398   1          return (float)mag_value / 3000.0f;
  399   1      }
  400          
  401          /**
  402           * @brief IMU数据处理主函数（在定时器中断中调用）
  403           */
  404          void imu963ra_process(void)
  405          {
  406   1          // 读取原始数据
  407   1          imu963ra_read_data();
  408   1          
  409   1          // 应用校准
  410   1          imu963ra_apply_calibration();
  411   1          
  412   1          // 低通滤波
  413   1          imu963ra_low_pass_filter();
  414   1          
  415   1          // // 使用简单的互补滤波器方法（更稳定）
  416   1          // imu963ra_simple_attitude_update();
  417   1          
  418   1          // 如果需要四元数方法，可以调用：
  419   1          imu963ra_update_attitude();
  420   1      }
  421          
  422          /**
  423           * @brief 简单的互补滤波器姿态解算（备用方法）
  424           */
  425          void imu963ra_simple_attitude_update(void)
  426          {
  427   1          float ax, ay, az;
  428   1          float gx, gy, gz;
  429   1          float acc_roll, acc_pitch;
  430   1          static float gyro_roll = 0.0f, gyro_pitch = 0.0f, gyro_yaw = 0.0f;
  431   1          const float alpha = 0.98f;  // 互补滤波器系数
  432   1          const float RAD_TO_DEG = 180.0f / M_PI;
  433   1          const float DEG_TO_RAD = M_PI / 180.0f;
  434   1          
  435   1          if (!init_flag) return;
  436   1          
  437   1          // 转换为物理单位
C251 COMPILER V5.60.0,  imu                                                                20/07/25  04:10:03  PAGE 8   

  438   1          ax = imu963ra_acc_to_g(imu963ra_data_filtered.accX);
  439   1          ay = imu963ra_acc_to_g(imu963ra_data_filtered.accY);
  440   1          az = imu963ra_acc_to_g(imu963ra_data_filtered.accZ);
  441   1          
  442   1          gx = imu963ra_gyro_to_dps(imu963ra_data_filtered.gyroX);
  443   1          gy = imu963ra_gyro_to_dps(imu963ra_data_filtered.gyroY);
  444   1          gz = imu963ra_gyro_to_dps(imu963ra_data_filtered.gyroZ);
  445   1          
  446   1          // 从加速度计计算角度
  447   1          acc_roll = atan2(ay, az) * RAD_TO_DEG;
  448   1          acc_pitch = atan2(-ax, sqrt(ay*ay + az*az)) * RAD_TO_DEG;
  449   1          
  450   1          // 陀螺仪积分
  451   1          gyro_roll += gx * IMU963RA_SAMPLE_TIME;
  452   1          gyro_pitch += gy * IMU963RA_SAMPLE_TIME;
  453   1          gyro_yaw += gz * IMU963RA_SAMPLE_TIME;
  454   1          
  455   1          // 互补滤波器
  456   1          imu963ra_angle.roll = alpha * gyro_roll + (1.0f - alpha) * acc_roll;
  457   1          imu963ra_angle.pitch = alpha * gyro_pitch + (1.0f - alpha) * acc_pitch;
  458   1          imu963ra_angle.yaw = gyro_yaw;  // 偏航角只能靠陀螺仪
  459   1          
  460   1          // 更新陀螺仪积分值
  461   1          gyro_roll = imu963ra_angle.roll;
  462   1          gyro_pitch = imu963ra_angle.pitch;
  463   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2760     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       102         58
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       340     ------
End of Module Information.


C251 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
