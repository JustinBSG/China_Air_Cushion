C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:10:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Objects\isr.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Src\isr.c XSMALL BROWSE INCDIR(.\Libraries\libraries;.\Libraries\seekf
                    -ree_components;.\Libraries\seekfree_libraries;.\Libraries\seekfree_peripheral;.\Inc) DEBUG PRINT(.\Listings\isr.lst) TAB
                    -S(2) OBJECT(.\Objects\isr.obj) 

stmt  level    source

    1          ///******************************************************************************************************
             -***************
    2          // * COPYRIGHT NOTICE
    3          // * Copyright (c) 2020,ï¿½ï¿½É¿Æ¼ï¿½
    4          // * All rights reserved.
    5          // * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½QQÈºï¿½ï¿½Ò»Èºï¿½ï¿½179029047(ï¿½ï¿½ï¿½ï¿½)  ï¿½ï¿½Èºï¿½ï¿½244861897(ï¿½ï¿½ï
             -¿½ï¿½)  ï¿½ï¿½Èºï¿½ï¿½824575535
    6          // *
    7          // * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý°ï¿½È¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½É¿Æ¼ï¿½ï¿½ï¿½ï¿½Ð£ï¿½Î´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï
             -¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Òµï¿½ï¿½Í¾ï¿½ï¿½
    8          // * ï¿½ï¿½Ó­ï¿½ï¿½Î»Ê¹ï¿½Ã²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Þ¸ï¿½ï¿½ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ë±£ï¿½ï¿½ï¿½ï
             -¿½É¿Æ¼ï¿½ï¿½Ä°ï¿½È¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    9          // *
   10          // * @file          isr
   11          // * @company       ï¿½É¶ï¿½ï¿½ï¿½É¿Æ¼ï¿½ï¿½ï¿½ï¿½Þ¹ï¿½Ë¾
   12          // * @author        ï¿½ï¿½É¿Æ¼ï¿½(QQ790875685)
   13          // * @version       ï¿½é¿´docï¿½ï¿½versionï¿½Ä¼ï¿½ ï¿½æ±¾Ëµï¿½ï¿½
   14          // * @Software      MDK FOR C251 V5.60
   15          // * @Target core   STC32G12K128
   16          // * @Taobao        https://seekfree.taobao.com/
   17          // * @date          2020-4-14
   18          // ******************************************************************************************************
             -**************/
   19          #include "headfile.h"
   20          #include "tick.h"
   21          
   22          //UART1ï¿½Ð¶ï¿½
   23          void UART1_Isr() interrupt 4
   24          {
   25   1          uint8 res;
   26   1        static uint8 dwon_count;
   27   1          if(UART1_GET_TX_FLAG)
   28   1          {
   29   2              UART1_CLEAR_TX_FLAG;
   30   2              busy[1] = 0;
   31   2          }
   32   1          if(UART1_GET_RX_FLAG)
   33   1          {
   34   2              UART1_CLEAR_RX_FLAG;
   35   2              res = SBUF;
   36   2              //ï¿½ï¿½ï¿½ï¿½ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½ï¿½
   37   2              if(res == 0x7F)
   38   2              {
   39   3                  if(dwon_count++ > 20)
   40   3                      IAP_CONTR = 0x60;
   41   3              }
   42   2              else
   43   2              {
   44   3                  dwon_count = 0;
   45   3              }
   46   2          }
   47   1      }
   48          
   49          //UART2ï¿½Ð¶ï¿½
   50          void UART2_Isr() interrupt 8
   51          {
   52   1          if(UART2_GET_TX_FLAG)
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:10:02  PAGE 2   

   53   1        {
   54   2              UART2_CLEAR_TX_FLAG;
   55   2          busy[2] = 0;
   56   2        }
   57   1          if(UART2_GET_RX_FLAG)
   58   1        {
   59   2              UART2_CLEAR_RX_FLAG;
   60   2          //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý¼Ä´ï¿½ï¿½ï¿½Îªï¿½ï¿½S2BUF
   61   2      
   62   2        }
   63   1      }
   64          
   65          
   66          //UART3ï¿½Ð¶ï¿½
   67          void UART3_Isr() interrupt 17
   68          {
   69   1          if(UART3_GET_TX_FLAG)
   70   1        {
   71   2              UART3_CLEAR_TX_FLAG;
   72   2          busy[3] = 0;
   73   2        }
   74   1          if(UART3_GET_RX_FLAG)
   75   1        {
   76   2              UART3_CLEAR_RX_FLAG;
   77   2          //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý¼Ä´ï¿½ï¿½ï¿½Îªï¿½ï¿½S3BUF
   78   2      
   79   2        }
   80   1      }
   81          
   82          
   83          //UART4ï¿½Ð¶ï¿½
   84          void UART4_Isr() interrupt 18
   85          {
   86   1          if(UART4_GET_TX_FLAG)
   87   1        {
   88   2              UART4_CLEAR_TX_FLAG;
   89   2          busy[4] = 0;
   90   2        }
   91   1          if(UART4_GET_RX_FLAG)
   92   1        {
   93   2              UART4_CLEAR_RX_FLAG;
   94   2      
   95   2          //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý¼Ä´ï¿½ï¿½ï¿½Îªï¿½ï¿½S4BUF;
   96   2          if(wireless_module_uart_handler != NULL)
   97   2          {
   98   3            // ï¿½Ãºï¿½ï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½Ö¸ï¿½ï¿½
   99   3            // ï¿½Ù³ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä£ï¿½ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Ã¸Ãºï¿½ï¿½ï¿½ï¿½ï¿½Ö·
  100   3            wireless_module_uart_handler(S4BUF);
  101   3          }
  102   2        }
  103   1      }
  104          
  105          #define LED P52
  106          void INT0_Isr() interrupt 0
  107          {
  108   1        LED = 0;  //ï¿½ï¿½ï¿½ï¿½LED
  109   1      }
  110          void INT1_Isr() interrupt 2
  111          {
  112   1      
  113   1      }
  114          void INT2_Isr() interrupt 10
  115          {
  116   1        INT2_CLEAR_FLAG;  //ï¿½ï¿½ï¿½ï¿½Ð¶Ï±ï¿½Ö¾
  117   1      }
  118          void INT3_Isr() interrupt 11
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:10:02  PAGE 3   

  119          {
  120   1        INT3_CLEAR_FLAG;  //ï¿½ï¿½ï¿½ï¿½Ð¶Ï±ï¿½Ö¾
  121   1      }
  122          
  123          void INT4_Isr() interrupt 16
  124          {
  125   1        INT4_CLEAR_FLAG;  //ï¿½ï¿½ï¿½ï¿½Ð¶Ï±ï¿½Ö¾
  126   1      }
  127          
  128          void TM0_Isr() interrupt 1
  129          {
  130   1        tick++;
  131   1      }
  132          void TM1_Isr() interrupt 3
  133          {
  134   1      
  135   1      }
  136          void TM2_Isr() interrupt 12
  137          {
  138   1        TIM2_CLEAR_FLAG;  //ï¿½ï¿½ï¿½ï¿½Ð¶Ï±ï¿½Ö¾
  139   1        
  140   1      }
  141          void TM3_Isr() interrupt 19
  142          {
  143   1        TIM3_CLEAR_FLAG; //ï¿½ï¿½ï¿½ï¿½Ð¶Ï±ï¿½Ö¾
  144   1        
  145   1      }
  146          
  147          void TM4_Isr() interrupt 20
  148          {
  149   1        TIM4_CLEAR_FLAG; //ï¿½ï¿½ï¿½ï¿½Ð¶Ï±ï¿½Ö¾
  150   1      //  ccd_collect();   //CCDï¿½É¼ï¿½ï¿½ï¿½ï¿½ï¿½
  151   1      
  152   1      }
  153          
  154          //void  INT0_Isr()  interrupt 0;
  155          //void  TM0_Isr()   interrupt 1;
  156          //void  INT1_Isr()  interrupt 2;
  157          //void  TM1_Isr()   interrupt 3;
  158          //void  UART1_Isr() interrupt 4;
  159          //void  ADC_Isr()   interrupt 5;
  160          //void  LVD_Isr()   interrupt 6;
  161          //void  PCA_Isr()   interrupt 7;
  162          //void  UART2_Isr() interrupt 8;
  163          //void  SPI_Isr()   interrupt 9;
  164          //void  INT2_Isr()  interrupt 10;
  165          //void  INT3_Isr()  interrupt 11;
  166          //void  TM2_Isr()   interrupt 12;
  167          //void  INT4_Isr()  interrupt 16;
  168          //void  UART3_Isr() interrupt 17;
  169          //void  UART4_Isr() interrupt 18;
  170          //void  TM3_Isr()   interrupt 19;
  171          //void  TM4_Isr()   interrupt 20;
  172          //void  CMP_Isr()   interrupt 21;
  173          //void  I2C_Isr()   interrupt 24;
  174          //void  USB_Isr()   interrupt 25;
  175          //void  PWM1_Isr()  interrupt 26;
  176          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       273     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
C251 COMPILER V5.60.0,  isr                                                                15/07/25  22:10:02  PAGE 4   

  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         1     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
