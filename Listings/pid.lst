C251 COMPILER V5.60.0,  pid                                                                20/07/25  00:46:27  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pid
OBJECT MODULE PLACED IN .\Objects\pid.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Src\pid.c XSMALL BROWSE INCDIR(.\Libraries\libraries;.\Libraries\seekf
                    -ree_components;.\Libraries\seekfree_libraries;.\Libraries\seekfree_peripheral;.\Inc) DEBUG PRINT(.\Listings\pid.lst) TAB
                    -S(2) OBJECT(.\Objects\pid.obj) 

stmt  level    source

    1          #include "pid.h"
    2          
    3          PIDController pid_data = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0};
    4          
    5          void pid_reset(PIDController *pid) {
    6   1        pid->kp = 0.0f;
    7   1        pid->ki = 0.0f;
    8   1        pid->kd = 0.0f;
    9   1        pid->setpoint = 0.0f;
   10   1        pid->integral = 0.0f;
   11   1        pid->prev_error = 0.0f;
   12   1        pid->last_time = 0;
   13   1      }
   14          
   15          void pid_task1(PIDController *pid, Fan *fans) {
   16   1        // float error = 0, p_term = 0, i_term = 0, d_term = 0, output = 0;
   17   1        // int left_fan_speed = 0, right_fan_speed = 0;
   18   1        // if (pid->kp != PID_TASK1_KP)
   19   1        //   pid->kp = PID_TASK1_KP;
   20   1        // if (pid->ki != PID_TASK1_KI)
   21   1        //   pid->ki = PID_TASK1_KI;
   22   1        // if (pid->kd != PID_TASK1_KD)
   23   1        //   pid->kd = PID_TASK1_KD;
   24   1        // if (pid->setpoint != 0.0f)
   25   1        //   pid->setpoint = 0.0f;
   26   1      
   27   1        // if (get_tick() - pid->last_time < PID_MIN_INTERVAL) {
   28   1        //   return;
   29   1        // }
   30   1        // pid->last_time = get_tick();
   31   1      
   32   1        // // imu660ra_get_data(imu_data);
   33   1        // imu963ra_get_data(imu_data);
   34   1      
   35   1        // // need to think again
   36   1        // error = pid->setpoint - imu_data->z_gyro;
   37   1      
   38   1        // p_term = pid->kp * error;
   39   1      
   40   1        // pid->integral += error * PID_MIN_INTERVAL;
   41   1        // i_term = pid->ki * pid->integral;
   42   1      
   43   1        // d_term = pid->kd * (error - pid->prev_error) / PID_MIN_INTERVAL;
   44   1        // pid->prev_error = error;
   45   1      
   46   1        // output = p_term + i_term + d_term;
   47   1      
   48   1        // left_fan_speed = FAN_MID_SPEED_PWM - (int)output;
   49   1        // right_fan_speed = FAN_MID_SPEED_PWM + (int)output;
   50   1      
   51   1        // if (left_fan_speed < FAN_0_SPEED_PWM)
   52   1        //   left_fan_speed = FAN_0_SPEED_PWM;
   53   1        // else if (left_fan_speed > FAN_FULL_SPEED_PWM)
   54   1        //   left_fan_speed = FAN_FULL_SPEED_PWM;
   55   1      
   56   1        // if (right_fan_speed < FAN_0_SPEED_PWM)
   57   1        //   right_fan_speed = FAN_0_SPEED_PWM;
C251 COMPILER V5.60.0,  pid                                                                20/07/25  00:46:27  PAGE 2   

   58   1        // else if (right_fan_speed > FAN_FULL_SPEED_PWM)
   59   1        //   right_fan_speed = FAN_FULL_SPEED_PWM;
   60   1      
   61   1        // fan_set_speed(&fans[2], left_fan_speed);   // Left fan
   62   1        // fan_set_speed(&fans[3], right_fan_speed);  // Right fan
   63   1      }
*** WARNING C47 IN LINE 15 OF Src\pid.c: 'pid': unreferenced parameter
*** WARNING C47 IN LINE 15 OF Src\pid.c: 'fans': unreferenced parameter
   64          
   65          void pid_task2(PIDController *pid, Fan *fans) {
   66   1        if (get_tick() - pid->last_time < PID_MIN_INTERVAL) {
   67   2          return;
   68   2        }
   69   1      }
*** WARNING C47 IN LINE 65 OF Src\pid.c: 'fans': unreferenced parameter
   70          
   71          void pid_task3(PIDController *pid, Fan *fans) {
   72   1        // give up
   73   1      }
*** WARNING C47 IN LINE 71 OF Src\pid.c: 'pid': unreferenced parameter
*** WARNING C47 IN LINE 71 OF Src\pid.c: 'fans': unreferenced parameter
   74          
   75          void pid_rotate(PIDController *pid, Fan *fans, int degree) {}
*** WARNING C47 IN LINE 75 OF Src\pid.c: 'pid': unreferenced parameter
*** WARNING C47 IN LINE 75 OF Src\pid.c: 'fans': unreferenced parameter
*** WARNING C47 IN LINE 75 OF Src\pid.c: 'degree': unreferenced parameter


Module Information          Static   Overlayable
------------------------------------------------
  code size            =        66     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        28          2
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        32     ------
End of Module Information.


C251 COMPILATION COMPLETE.  8 WARNING(S),  0 ERROR(S)
