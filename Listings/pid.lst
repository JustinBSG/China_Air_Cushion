C251 COMPILER V5.60.0,  pid                                                                18/07/25  15:18:50  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE pid
OBJECT MODULE PLACED IN .\Objects\pid.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Src\pid.c XSMALL BROWSE INCDIR(.\Libraries\libraries;.\Libraries\seekf
                    -ree_components;.\Libraries\seekfree_libraries;.\Libraries\seekfree_peripheral;.\Inc) DEBUG PRINT(.\Listings\pid.lst) TAB
                    -S(2) OBJECT(.\Objects\pid.obj) 

stmt  level    source

    1          #include "pid.h"
    2          
    3          PIDController pid_data = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0};
    4          
    5          void pid_reset(PIDController *pid) {
    6   1        pid->kp = 0.0f;
    7   1        pid->ki = 0.0f;
    8   1        pid->kd = 0.0f;
    9   1        pid->setpoint = 0.0f;
   10   1        pid->integral = 0.0f;
   11   1        pid->prev_error = 0.0f;
   12   1        pid->last_time = 0;
   13   1      }
   14          
   15          void pid_task1(PIDController *pid, IMUData *imu_data, Fan *fans) {
   16   1        float error = 0, p_term = 0, i_term = 0, d_term = 0, output = 0;
   17   1        int left_fan_speed = 0, right_fan_speed = 0;
   18   1        if (pid->kp != PID_TASK1_KP)
   19   1          pid->kp = PID_TASK1_KP;
   20   1        if (pid->ki != PID_TASK1_KI)
   21   1          pid->ki = PID_TASK1_KI;
   22   1        if (pid->kd != PID_TASK1_KD)
   23   1          pid->kd = PID_TASK1_KD;
   24   1        if (pid->setpoint != 0.0f)
   25   1          pid->setpoint = 0.0f;
   26   1      
   27   1        if (get_tick() - pid->last_time < PID_MIN_INTERVAL) {
   28   2          return;
   29   2        }
   30   1        pid->last_time = get_tick();
   31   1      
   32   1        imu660ra_get_data(imu_data);
   33   1      
   34   1        // need to think again
   35   1        error = pid->setpoint - imu_data->z_gyro;
   36   1      
   37   1        p_term = pid->kp * error;
   38   1      
   39   1        pid->integral += error * PID_MIN_INTERVAL;
   40   1        i_term = pid->ki * pid->integral;
   41   1      
   42   1        d_term = pid->kd * (error - pid->prev_error) / PID_MIN_INTERVAL;
   43   1        pid->prev_error = error;
   44   1      
   45   1        output = p_term + i_term + d_term;
   46   1      
   47   1        left_fan_speed = FAN_MID_SPEED_PWM - (int)output;
   48   1        right_fan_speed = FAN_MID_SPEED_PWM + (int)output;
   49   1      
   50   1        if (left_fan_speed < FAN_0_SPEED_PWM)
   51   1          left_fan_speed = FAN_0_SPEED_PWM;
   52   1        else if (left_fan_speed > FAN_FULL_SPEED_PWM)
   53   1          left_fan_speed = FAN_FULL_SPEED_PWM;
   54   1      
   55   1        if (right_fan_speed < FAN_0_SPEED_PWM)
   56   1          right_fan_speed = FAN_0_SPEED_PWM;
   57   1        else if (right_fan_speed > FAN_FULL_SPEED_PWM)
C251 COMPILER V5.60.0,  pid                                                                18/07/25  15:18:50  PAGE 2   

   58   1          right_fan_speed = FAN_FULL_SPEED_PWM;
   59   1      
   60   1        fan_set_speed(&fans[2], left_fan_speed);   // Left fan
   61   1        fan_set_speed(&fans[3], right_fan_speed);  // Right fan
   62   1      }
   63          
   64          void pid_task2(PIDController *pid, IMUData *imu_data, Fan *fans) {
   65   1        if (get_tick() - pid->last_time < PID_MIN_INTERVAL) {
   66   2          return;
   67   2        }
   68   1      }
*** WARNING C47 IN LINE 64 OF Src\pid.c: 'imu_data': unreferenced parameter
*** WARNING C47 IN LINE 64 OF Src\pid.c: 'fans': unreferenced parameter
   69          
   70          void pid_task3(PIDController *pid, IMUData *imu_data, Fan *fans) {
   71   1        // give up
   72   1      }
*** WARNING C47 IN LINE 70 OF Src\pid.c: 'pid': unreferenced parameter
*** WARNING C47 IN LINE 70 OF Src\pid.c: 'imu_data': unreferenced parameter
*** WARNING C47 IN LINE 70 OF Src\pid.c: 'fans': unreferenced parameter
   73          
   74          void pid_rotate(PIDController *pid, HMC5883L_Data *hmc5883l_data, HMC5883L_Calibration *hmc5883l_cali_dat
             -a, Fan *fans, int degree) {}
*** WARNING C47 IN LINE 74 OF Src\pid.c: 'pid': unreferenced parameter
*** WARNING C47 IN LINE 74 OF Src\pid.c: 'hmc5883l_data': unreferenced parameter
*** WARNING C47 IN LINE 74 OF Src\pid.c: 'hmc5883l_cali_data': unreferenced parameter
*** WARNING C47 IN LINE 74 OF Src\pid.c: 'fans': unreferenced parameter
*** WARNING C47 IN LINE 74 OF Src\pid.c: 'degree': unreferenced parameter


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       535     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        28         30
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        32     ------
End of Module Information.


C251 COMPILATION COMPLETE.  10 WARNING(S),  0 ERROR(S)
